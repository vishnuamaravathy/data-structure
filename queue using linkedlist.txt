#include <stdio.h>

#include <stdlib.h>
 

struct node

{

    int data;

    struct node *next;

}*front,*rear,*temp,*front1;

int frontelement();

void insert(int item);

void delete();

void display();

void create();


int count = 0;


void main()

{

    int no, ch, e;

 
   printf("Enter your choice:\n1.Insert\n2.Delete\n3.Front element\n4.Display\n5.Exit\n");

    create();

    while (1)

    {

        printf("\n Enter choice : ");

        scanf("%d", &ch);

        switch (ch)

        {

           case 1: printf("Enter data : ");

                       scanf("%d", &no);

                       insert(no);

                       break;

           case 2:delete();

                       break;

           case 3:e = frontelement();

                      if (e != 0)

                      printf("Front element : %d", e);

                      else

                      printf("\n No front element in Queue as queue is empty");

                      break;

          case 4:display();
 
                      break;

          case 5:exit(0); 
  
        default:printf("Wrong choice, Please enter correct choice  ");

                       break;

        }

    }

}

void create()

{

    front = rear = NULL;

}

 
void insert(int item)

{

    if (rear == NULL)

    {

        rear = (struct node *)malloc(1*sizeof(struct node));

        rear->next = NULL;

        rear->data = item;

        front = rear;

    }

    else

    {

        temp=(struct node *)malloc(1*sizeof(struct node));

        rear->next=temp;

        temp->data=item;

        temp->next=NULL;

 
       rear = temp;

    }

    count++;

}


void display()

{

    front1 = front;

 
   if ((front1 == NULL) && (rear == NULL))

    {

        printf("Queue is empty");

        return;

    }

    while (front1 != rear)

    {

        printf("%d ", front1->data);

        front1 = front1->next;

    }

    if (front1 == rear)

        printf("%d", front1->data);

}

 
void delete()

{

    front1 = front;

 
   if (front1 == NULL)

    {

        printf("\n Error: Trying to display elements from empty queue");

        return;

    }

    else

        if (front1->next!= NULL)

        {

            front1 = front1->next;

            printf("\n Dequed value : %d", front->data);

            free(front);

            front = front1;

        }

        else

        {

            printf("\n Dequed value : %d", front->data);

            free(front);

            front = NULL;

            rear = NULL;

        }

        count--;

}

 
int frontelement()

{

    if ((front != NULL) && (rear != NULL))

        return(front->data);

    else

        return 0;

}
 

